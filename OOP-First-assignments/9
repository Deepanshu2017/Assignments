//============================================================================
// Name        : bank9.cpp
// Author      : Deepanshu Thakur
// Version     : 1.0
// Copyright   : None
// Description : Ninth Program
//============================================================================


#include <iostream>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
class Rational{
private:
	int a;
public:
	Rational(){
		a=0;
	}
	Rational(int a){
		this->a=a;
	}
	Rational operator+(Rational &r){
		Rational s;
		s.a=a+r.a;
		return s;
	}
	Rational operator-(Rational &r){
		Rational s;
		s.a=a-r.a;
		return s;
	}
	Rational operator*(Rational &r){
		Rational s;
		s.a=a*r.a;
		return s;
	}
	Rational operator/(Rational &r){
		Rational s;
		s.a=a/r.a;
		return s;
	}
	void getdata(){
		char ch;
		char arr[10];
		int i=0,j=0;
		ch=getchar_unlocked();
		if(ch==10){
			ch=getchar_unlocked();
		}
		while(1){
			arr[i]=ch-'0';
			ch=getchar_unlocked();
			if(ch==10)
				break;
			if(ch==32)
				break;
			i+=1;
		}
		a=0;
		for(j=0;j<i;j++){
			a=a+arr[i];
			if(arr[i]%1!=0){
				cout<<"Not a rational number Program is closing now"<<endl;
				cin>>ch;
				exit(1);
			}
		}
		//cin>>a;
	}
	void display(){
		cout<<a<<endl;
	}

	Rational add(Rational &r){
		Rational s;
		s.a=a+r.a;
		return s;
	}
	Rational sub(Rational &r){
		Rational s;
		s.a=a-r.a;
		return s;
	}
	Rational mul(Rational &r){
		Rational s;
		s.a=a*r.a;
		return s;
	}
	Rational div(Rational &r){
		Rational s;
		s.a=a/r.a;
		return s;
	}

	friend ostream & operator<< (ostream &, Rational &);
	friend istream & operator>> (istream &, Rational &);
};
ostream & operator<<(ostream &out, Rational &s){
	out<<s.a<<endl;
}
istream & operator>>(istream &in, Rational &s){
	in>>s.a;
}

int main(void) {
	Rational r1,r2,r3,r4;
	cin>>r1;
	r2=r1;
	cout<<r2;
	r3=r1+r2;
	cout<<r3;
	r4=r3/r1;
	cout<<r4;
	r1.getdata();
	r2.getdata();
	r3=r1.add(r2);
	r3.display();
	r3=r1.sub(r2);
	r3.display();
	r3=r1.mul(r2);
	r3.display();
	r3=r1.div(r2);
	r3.display();
	return 0;
}
